// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// authentication
enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid()) @db.VarChar(25)
  name                  String?                @db.VarChar(60)
  username              String?                @unique @db.VarChar(80)
  email                 String?                @unique @db.VarChar(100)
  emailVerified         DateTime?
  image                 String?
  password              String?                @db.VarChar(73)
  role                  UserRole               @default(USER)
  Account               Account?
  // Optional for WebAuthn support
  Authenticator         Authenticator[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid()) @db.VarChar(25)
  userId                   String  @unique @db.VarChar(25)
  type                     String
  provider                 String
  providerAccountId        String  @db.VarChar(25)
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @db.VarChar(25)
  providerAccountId    String  @db.VarChar(25)
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  id      String   @id @default(cuid()) @db.VarChar(25)
  email   String   @db.VarChar(100)
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @db.VarChar(25)
  email   String   @db.VarChar(100)
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @db.VarChar(25)
  email   String   @db.VarChar(100)
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @db.VarChar(25)
  userId String @db.VarChar(25)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Store
model Store {
  id        String   @id @default(cuid()) @db.VarChar(25)
  name      String   @db.VarChar(50)
  userId    String   @db.VarChar(25)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
